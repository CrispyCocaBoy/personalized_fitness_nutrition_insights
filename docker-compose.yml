services:

  query:
    build:
      context: .
      dockerfile: src/query/Dockerfile
    container_name: query
    depends_on:
      - broker_kafka
      - emqx1

  streamlit_app:
    build:
      context: .
      dockerfile: ./src/frontend/Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - ./src/frontend:/app
      - ./utility:/app/utility

# Ingestion phase
## MQTT protocol
  emqx1:
    image: emqx/emqx-enterprise:5.10.0
    container_name: emqx1
    environment:
      - "EMQX_NODE_NAME=emqx@node1.emqx.com"
      - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
      - "EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.com,emqx@node2.emqx.com]"
    healthcheck:
      test: [ "CMD", "/opt/emqx/bin/emqx", "ctl", "status" ]
      interval: 5s
      timeout: 25s
      retries: 5

    ports:
      - 1883:1883     # MQTT
      - 8083:8083     # WebSocket
      - 8084:8084     # WSS
      - 8883:8883     # MQTT over TLS
      - 18083:18083   # Dashboard
    volumes:
      - ./volumes/emqx_data/config/cluster.hocon:/opt/emqx/data/configs/

## Kafka
  broker_kafka:
    image: apache/kafka:latest
    container_name: broker_kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://broker_kafka:9092, CONTROLLER://broker_kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker_kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker_kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - ./volumes/kafka_setting/broker:/var/lib/kafka

  init_kafka:
    build:
      context: .
      dockerfile: ./src/kafka_topics/Dockerfile
    depends_on:
      - broker_kafka
    container_name: init_kafka


  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./volumes/kafka_setting/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
    depends_on:
      - broker_kafka

# Databases
  cockroachdb:
    image: cockroachdb/cockroach:v25.2.0
    container_name: cockroachdb
    command: start-single-node --insecure --http-addr=0.0.0.0:8080
    ports:
      - "26257:26257" # Porta SQL
      - "8087:8080"   # Admin UI
    volumes:
      - ./volumes/cockroach_data:/cockroach/cockroach-data

  minio:
    image: minio/minio
    ports:
      - "9000:9000"      # API
      - "9001:9001"      # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./volumes/minio_setting:/data

# Data Generator
  fake_user:
    build:
      context: .
      dockerfile: ./src/data_generator/producer_user_generator/Dockerfile
    container_name: fake_user
    volumes:
      - ./database_utility/fake_user_and_password:/app/output/
    depends_on:
      - cockroachdb

  people_simulator:
    build:
      context: .                                  # la root del progetto
      dockerfile: src/data_generator/sensors/people_simulator/Dockerfile
    container_name: people_simulator
    depends_on:
      - emqx1

# ETL process
  ## Spark Master
  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    command: /opt/bitnami/scripts/spark/run.sh master
    environment:
      - SPARK_MODE=master
    ports:
      - "8085:8080"
      - "7077:7077"

  ## Spark Worker 1
  spark-worker-1:
    image: bitnami/spark:latest
    container_name: spark-worker-1
    command: /opt/bitnami/scripts/spark/run.sh worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    depends_on:
      - spark-master

  ## Spark Worker 2
  spark-worker-2:
    image: bitnami/spark:latest
    container_name: spark-worker-2
    command: /opt/bitnami/scripts/spark/run.sh worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    depends_on:
      - spark-master

  ## Bronze layer job
  bpm_consumer:
    build:
      context: .
      dockerfile: src/delta/bronze/sensors_consumers/Dockerfile
    container_name: bpm_consumer
    depends_on:
      - broker_kafka
      - spark-master
      - emqx1

volumes:
  fake_generator_output:
