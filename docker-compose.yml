version: '3.8'

volumes:
  postgres-db:
    driver: local

services:
  # --------------------------------------------------------------------
  # 1. CORE INFRASTRUCTURE (DBs, Storage, Cache)
  # --------------------------------------------------------------------
  cockroachdb:
    image: cockroachdb/cockroach:v25.2.0
    container_name: cockroachdb
    command: start-single-node --insecure --http-addr=0.0.0.0:8080
    ports: ["26257:26257", "8087:8080"]
    volumes:
      - ./volumes/cockroach_data:/cockroach/cockroach-data
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio
    ports: ["9000:9000", "9001:9001"]
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./volumes/minio_setting:/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    ports: ["6379:6379"]
    volumes:
      - ./volumes/redis_data:/data
    networks:
      - app-net

  redisinsight:
    image: redis/redisinsight
    container_name: redisinsight
    ports: ["5540:5540"]
    volumes:
      - ./volumes/redis_data:/data
    networks:
      - app-net

  postgres: # Database per i metadati di Airflow
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-db:/var/lib/postgresql/data
    networks:
      - app-net

  # --------------------------------------------------------------------
  # 2. INGESTION & STREAMING (MQTT, Kafka)
  # --------------------------------------------------------------------
  broker_kafka:
    image: apache/kafka:latest
    container_name: broker_kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://broker_kafka:9092,CONTROLLER://broker_kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker_kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker_kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - ./volumes/kafka_setting/broker:/var/lib/kafka
    networks:
      - app-net

  init_kafka:
    build:
      context: .
      dockerfile: ./src/kafka_topics/Dockerfile
    depends_on:
      - broker_kafka
    container_name: init_kafka
    networks:
      - app-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports: ["8082:8080"]
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./volumes/kafka_setting/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
    depends_on:
      - broker_kafka
    networks:
      - app-net
  
  emqx1:
    image: emqx/emqx-enterprise:5.10.0
    container_name: emqx1
    environment:
      EMQX_NODE__NAME: emqx@node1.emqx.local
      EMQX_CLUSTER__DISCOVERY_STRATEGY: manual
      EMQX_DASHBOARD__DEFAULT_USERNAME: admin
      EMQX_DASHBOARD__DEFAULT_PASSWORD: public
      EMQX_BRIDGES__KAFKA__kafka_producer__SERVERS: broker_kafka:9092
    ports:
      - "1883:1883"
      - "8083:8083"
      - "8883:8883"
      - "18083:18083"
    networks:
      - app-net
    depends_on:
      - broker_kafka

  # --------------------------------------------------------------------
  # 3. BATCH ORCHESTRATION (Airflow)
  # --------------------------------------------------------------------
  airflow-webserver:
    <<: &airflow-common
      build:
        context: .
        dockerfile: Dockerfile
      environment:
        - AIRFLOW__CORE__EXECUTOR=LocalExecutor
        - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=false
        - AIRFLOW__CORE__LOAD_EXAMPLES=false
        - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
        - AIRFLOW__WEBSERVER__SECRET_KEY=your-super-secret-key-change-me
        - AIRFLOW__SCHEDULER__SCHEDULER_ZOMBIE_TASK_THRESHOLD=500
      volumes:
        - ./dags:/opt/airflow/dags
        - ./logs:/opt/airflow/logs
        - ./plugins:/opt/airflow/plugins
        - ./spark_scripts:/opt/spark/apps
      networks:
        - app-net
    container_name: airflow-webserver
    command: airflow webserver
    ports: ["8080:8080"]
    depends_on:
      postgres:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: airflow scheduler
    depends_on:
      postgres:
        condition: service_started
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$${HOSTNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: -c "airflow db init && airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true"
    depends_on:
      postgres:
        condition: service_started

  # --------------------------------------------------------------------
  # 4. PROCESSING CLUSTER (Spark)
  # --------------------------------------------------------------------
  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "8085:8080"
      - "7077:7077"
    volumes:
      - ./spark_scripts:/opt/spark/apps
    networks:
      - app-net

  spark-worker-1:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
    volumes:
      - ./spark_scripts:/opt/spark/apps
    depends_on:
      - spark-master
    networks:
      - app-net

  spark-worker-2:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
    volumes:
      - ./spark_scripts:/opt/spark/apps
    depends_on:
      - spark-master
    networks:
      - app-net

  spark-worker-3:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker-3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
    volumes:
      - ./spark_scripts:/opt/spark/apps
    depends_on:
      - spark-master
    networks:
      - app-net

  # --------------------------------------------------------------------
  # 5. STREAMING JOBS, DATA GENERATORS & UTILITIES
  # --------------------------------------------------------------------
  bronze_layer:
    build:
      context: .
      dockerfile: src/delta/bronze/sensors_consumers/Dockerfile
    container_name: bronze_layer
    depends_on:
      - broker_kafka
      - spark-master
    networks:
      - app-net
      
  silver_layer:
    build:
      context: .
      dockerfile: src/delta/silver/sensor_silver/Dockerfile
    container_name: silver_layer
    depends_on:
      - broker_kafka
      - spark-master
    networks:
      - app-net

  gold_metrics:
    build:
      context: .
      dockerfile: src/delta/gold/sensor_gold/Dockerfile
    container_name: gold_metrics
    depends_on:
      - silver_layer
      - spark-master
    networks:
      - app-net
  
  gold_meal:
    build:
      context: .
      dockerfile: src/delta/gold/meal_gold/Dockerfile
    container_name: gold_meal
    depends_on:
      - silver_layer
      - spark-master
    networks:
      - app-net

  gold_activity:
    build:
      context: .
      dockerfile: src/delta/gold/activity_gold/Dockerfile
    container_name: gold_activity
    depends_on:
      - silver_layer
      - spark-master
    networks:
      - app-net

  change_data_capture_user_map:
    build:
      context: ./src/change_data_capture/CDC_user_map
      dockerfile: Dockerfile
    container_name: change_data_capture_user_map
    depends_on:
      - broker_kafka
      - redis
    environment:
      KAFKA_BOOTSTRAP: broker_kafka:9092
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - app-net

  change_data_capture_toggling_sensor:
    build:
      context: ./src/change_data_capture/CDC_toggling_sensor
      dockerfile: Dockerfile
    container_name: change_data_capture_toggling_sensor
    depends_on:
      - broker_kafka
      - redis
    environment:
      KAFKA_BOOTSTRAP: broker_kafka:9092
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - app-net

  fake_user:
    build:
      context: .
      dockerfile: ./src/data_generator/producer_user_generator/Dockerfile
    container_name: fake_user
    volumes:
      - ./database_utility/fake_user_and_password:/app/output/
    depends_on:
      cockroachdb:
        condition: service_healthy
    networks:
      - app-net

  people_simulator:
    build:
      context: .
      dockerfile: src/data_generator/sensors/people_simulator/Dockerfile
    container_name: people_simulator
    depends_on:
      - emqx1
      - bronze_layer
      - redis
    networks:
      - app-net

  sensor_coherent_simulator:
    build:
      context: .
      dockerfile: src/data_generator/sensors/sensor_coherent_simulator/Dockerfile
    container_name: sensor_coherent_simulator
    depends_on:
      - emqx1
      - bronze_layer
    networks:
      - app-net

  # --------------------------------------------------------------------
  # 6. APPLICATION LAYER (Frontend & Gateway)
  # --------------------------------------------------------------------
  gateway:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: gateway
    ports:
      - "8237:8000"
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
    depends_on:
      - broker_kafka
      - minio
      - spark-master
    networks:
      - app-net
      
  streamlit_app:
    build:
      context: .
      dockerfile: ./src/frontend/Dockerfile
    container_name: streamlit_app
    ports:
      - "8501:8501"
    volumes:
      - ./src/frontend:/app
      - ./utility:/app/utility
    networks:
      - app-net
    depends_on:
      cockroachdb:
        condition: service_healthy
      gateway:
        condition: service_started

# --------------------------------------------------------------------
# GLOBAL DEFINITIONS
# --------------------------------------------------------------------
networks:
  app-net:
    driver: bridge