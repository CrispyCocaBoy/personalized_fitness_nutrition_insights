services:

  spark:
    image: bitnami/spark:latest
    environment:
      SPARK_MODE: master
    ports:
      - "8080:8080"
    depends_on:
      - broker_kafka
      - minio
      - kafka-ui

  spark-worker:
    image: bitnami/spark:latest
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark:7077
    depends_on:
      - spark

  bpm_consumer:
      build:
        context: .
        dockerfile: src/delta/bronze/sensors_consumers/Dockerfile
      container_name: bpm_consumer
      depends_on:
        - broker_kafka
        - spark
        - emqx1

  query:
    build:
      context: .
      dockerfile: src/query/Dockerfile
    container_name: query
    depends_on:
      - broker_kafka
      - spark
      - emqx1

  streamlit_app:
    build:
      context: .
      dockerfile: ./src/frontend/Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - ./src/frontend:/app
      - ./utility:/app/utility

# Ingestion phase
  emqx1:
    image: emqx/emqx-enterprise:5.10.0
    container_name: emqx1
    environment:
      - "EMQX_NODE_NAME=emqx@node1.emqx.com"
      - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
      - "EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.com,emqx@node2.emqx.com]"
    healthcheck:
      test: [ "CMD", "/opt/emqx/bin/emqx", "ctl", "status" ]
      interval: 5s
      timeout: 25s
      retries: 5
    networks:
      emqx-bridge:
        aliases:
          - node1.emqx.com
    ports:
      - 1883:1883     # MQTT
      - 8083:8083     # WebSocket
      - 8084:8084     # WSS
      - 8883:8883     # MQTT over TLS
      - 18083:18083   # Dashboard
    volumes:
      - ./volumes/emqx_data/config/cluster.hocon:/opt/emqx/data/configs/

## Kafka
  broker_kafka:
    image: apache/kafka:latest
    container_name: broker_kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://broker_kafka:9092, CONTROLLER://broker_kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker_kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker_kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - ./volumes/kafka_setting/broker:/var/lib/kafka/data

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8082
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./volumes/kafka_setting/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
    depends_on:
      - broker_kafka



# Databases
  postgres:
    image: postgres:18beta1
    container_name: user_device_db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: user_device_db
      PGDATA: /var/lib/postgresql/18/docker
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/ps_setting:/var/lib/postgresql

  minio:
    image: minio/minio
    ports:
      - "9000:9000"      # API
      - "9001:9001"      # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./volumes/minio_setting:/data

# Data Generator
  fake_user:
    build:
      context: .
      dockerfile: ./src/data_generator/producer_user_generator/Dockerfile
    container_name: fake_user
    volumes:
      - ./database_utility/fake_user_and_password:/app/output/
    depends_on:
      - postgres

  people_simulator:
    build:
      context: .                                  # la root del progetto
      dockerfile: src/data_generator/sensors/people_simulator/Dockerfile
    container_name: people_simulator
    networks:
      - emqx-bridge
    depends_on:
      - emqx1

volumes:
  fake_generator_output:

networks:
  emqx-bridge:
    driver: bridge